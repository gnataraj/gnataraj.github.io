<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://gnataraj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://gnataraj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-05-21T07:17:03+00:00</updated><id>https://gnataraj.github.io/feed.xml</id><title type="html">Nataraj’s GitHub Page</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Difference Between Git Log Reflog</title><link href="https://gnataraj.github.io/blog/2024/difference-between-git-log-reflog/" rel="alternate" type="text/html" title="Difference Between Git Log Reflog"/><published>2024-01-01T00:00:00+00:00</published><updated>2024-01-01T00:00:00+00:00</updated><id>https://gnataraj.github.io/blog/2024/difference-between-git-log-reflog</id><content type="html" xml:base="https://gnataraj.github.io/blog/2024/difference-between-git-log-reflog/"><![CDATA[<p>Difference Between git log and git reflog</p> <p><code class="language-plaintext highlighter-rouge">git log</code> and <code class="language-plaintext highlighter-rouge">git reflog</code> are both commands in Git, but they serve different purposes.</p> <ol> <li><strong>git log:</strong> <ul> <li>The <code class="language-plaintext highlighter-rouge">git log</code> command is used to display the commit history of a repository.</li> <li>It shows a list of commits, starting with the most recent one, and includes information such as the commit hash, author, date, and commit message.</li> <li>By default, it displays the commit history for the current branch.</li> </ul> <p>Example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log
</code></pre></div> </div> </li> <li><strong>git reflog:</strong> <ul> <li>The <code class="language-plaintext highlighter-rouge">git reflog</code> command, on the other hand, is used to display the reference logs.</li> <li>Reference logs are a history of where the <code class="language-plaintext highlighter-rouge">HEAD</code> and branch references have pointed to in the past.</li> <li>It includes not only the commit history but also any changes in branch pointers, such as branch creations, checkouts, merges, and rebases.</li> <li><code class="language-plaintext highlighter-rouge">git reflog</code> is useful for recovering lost commits or branches.</li> </ul> <p>Example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reflog
</code></pre></div> </div> </li> </ol> <p>In summary, while <code class="language-plaintext highlighter-rouge">git log</code> shows the commit history of a branch, <code class="language-plaintext highlighter-rouge">git reflog</code> shows a more detailed history of reference changes, which includes movements of the <code class="language-plaintext highlighter-rouge">HEAD</code> and branch references. The <code class="language-plaintext highlighter-rouge">git reflog</code> can be particularly helpful for recovering from accidental changes or if you need to revisit a previous state of your repository.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Difference Between git log and git reflog]]></summary></entry><entry><title type="html">Nginx Web Server With Ssl</title><link href="https://gnataraj.github.io/blog/2023/nginx-web-server-with-SSL/" rel="alternate" type="text/html" title="Nginx Web Server With Ssl"/><published>2023-10-29T00:00:00+00:00</published><updated>2023-10-29T00:00:00+00:00</updated><id>https://gnataraj.github.io/blog/2023/nginx-web-server-with-SSL</id><content type="html" xml:base="https://gnataraj.github.io/blog/2023/nginx-web-server-with-SSL/"><![CDATA[<p>Running an Nginx Docker container with a self-signed SSL certificate involves a few steps. Here’s a step-by-step guide to help you set it up:</p> <ol> <li> <p><strong>Create a Self-Signed SSL Certificate:</strong></p> <p>You can use the OpenSSL tool to generate a self-signed SSL certificate.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl req <span class="nt">-x509</span> <span class="nt">-nodes</span> <span class="nt">-days</span> 365 <span class="nt">-newkey</span> rsa:2048 <span class="nt">-keyout</span> nginx.key <span class="nt">-out</span> nginx.crt
</code></pre></div> </div> <p>This command will generate two files: <code class="language-plaintext highlighter-rouge">nginx.key</code> (private key) and <code class="language-plaintext highlighter-rouge">nginx.crt</code> (self-signed certificate).</p> </li> <li> <p><strong>Create a Dockerfile:</strong></p> <p>Create a file named <code class="language-plaintext highlighter-rouge">Dockerfile</code> in your project directory with the following content:</p> <div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> nginx:latest</span>

<span class="c"># Copy the SSL certificate and key to the container</span>
<span class="k">COPY</span><span class="s"> nginx.crt /etc/nginx/ssl/nginx.crt</span>
<span class="k">COPY</span><span class="s"> nginx.key /etc/nginx/ssl/nginx.key</span>

<span class="c"># Copy the Nginx configuration file</span>
<span class="k">COPY</span><span class="s"> nginx.conf /etc/nginx/conf.d/default.conf</span>
</code></pre></div> </div> </li> <li> <p><strong>Create Nginx Configuration:</strong></p> <p>Create an <code class="language-plaintext highlighter-rouge">nginx.conf</code> file in the same directory as your Dockerfile with the following content:</p> <div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
    <span class="kn">server_name</span> <span class="s">your_domain.com</span><span class="p">;</span>  <span class="c1"># Change this to your domain name</span>

    <span class="kn">ssl_certificate</span> <span class="n">/etc/nginx/ssl/nginx.crt</span><span class="p">;</span>
    <span class="kn">ssl_certificate_key</span> <span class="n">/etc/nginx/ssl/nginx.key</span><span class="p">;</span>

    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
        <span class="kn">root</span>   <span class="n">/usr/share/nginx/html</span><span class="p">;</span>
        <span class="kn">index</span>  <span class="s">index.html</span> <span class="s">index.htm</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div> <p>Replace <code class="language-plaintext highlighter-rouge">your_domain.com</code> with your actual domain name.</p> </li> <li> <p><strong>Build the Docker Image:</strong></p> <p>Run the following command in your terminal to build the Docker image:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> nginx-ssl <span class="nb">.</span>
</code></pre></div> </div> </li> <li> <p><strong>Run the Docker Container:</strong></p> <p>Finally, run the Docker container using the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">-p</span> 443:443 nginx-ssl
</code></pre></div> </div> </li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx
</code></pre></div></div> <p>docker run –name nginx-ssl -v //home/ubuntu/data:/usr/share/nginx/html:ro -p 443:443 -d nginx-ssl</p> <p>This maps the container’s port 443 to the host’s port 443.</p> <ol> <li> <p><strong>Access the Site:</strong></p> <p>Open a web browser and navigate to <code class="language-plaintext highlighter-rouge">https://your_domain.com</code>. You might get a security warning due to the self-signed certificate, but you can proceed to the site. The browser will indicate that the connection is not fully secure because the certificate is self-signed.</p> </li> </ol> <p>Remember that using self-signed certificates is not recommended for production environments since they don’t provide the same level of security as trusted certificates issued by a certificate authority. In a production environment, you should obtain a valid SSL certificate from a trusted certificate authority like Let’s Encrypt.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Running an Nginx Docker container with a self-signed SSL certificate involves a few steps. Here’s a step-by-step guide to help you set it up:]]></summary></entry><entry><title type="html">create a ssh key using aws-cli and store in PPK</title><link href="https://gnataraj.github.io/blog/2023/aws-cli-ssh-keys/" rel="alternate" type="text/html" title="create a ssh key using aws-cli and store in PPK"/><published>2023-08-30T15:09:00+00:00</published><updated>2023-08-30T15:09:00+00:00</updated><id>https://gnataraj.github.io/blog/2023/aws-cli-ssh-keys</id><content type="html" xml:base="https://gnataraj.github.io/blog/2023/aws-cli-ssh-keys/"><![CDATA[<p>To create an SSH key pair using the AWS Command Line Interface (CLI) and store it in a PPK (PuTTY Private Key) file, you can follow these steps:</p> <ol> <li> <p><strong>Install AWS CLI</strong>: If you haven’t already, you’ll need to install the AWS CLI on your local machine. You can download it from the <a href="https://aws.amazon.com/cli/">official AWS CLI website</a>.</p> </li> <li> <p><strong>Configure AWS CLI</strong>: Before you can use the AWS CLI, you need to configure it with your AWS credentials. You can do this by running the <code class="language-plaintext highlighter-rouge">aws configure</code> command and providing your AWS Access Key ID, Secret Access Key, default region, and output format.</p> </li> <li> <p><strong>Generate SSH Key Pair</strong>: You can use the <code class="language-plaintext highlighter-rouge">aws ec2 create-key-pair</code> command to generate an SSH key pair. Here’s an example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws ec2 create-key-pair <span class="nt">--key-name</span> MyKeyPair <span class="nt">--query</span> <span class="s1">'KeyMaterial'</span> <span class="nt">--output</span> text <span class="o">&gt;</span> MyKeyPair.pem
</code></pre></div> </div> <ul> <li><code class="language-plaintext highlighter-rouge">--key-name MyKeyPair</code>: Replace “MyKeyPair” with a name for your key pair.</li> <li><code class="language-plaintext highlighter-rouge">--query 'KeyMaterial' --output text</code>: This part of the command extracts the private key material and saves it in a file.</li> </ul> </li> <li> <p><strong>Convert the PEM Key to PPK</strong>: AWS generates the private key in PEM format, but if you plan to use it with PuTTY, you’ll need to convert it to PPK format. You can use a tool like PuTTYgen to do this:</p> <ul> <li>Open PuTTYgen.</li> <li>Click “Conversions” in the top menu.</li> <li>Select “Import Key” and choose the <code class="language-plaintext highlighter-rouge">MyKeyPair.pem</code> file generated in step 3.</li> <li>Click “Save Private Key” to save it in PPK format.</li> </ul> </li> </ol> <p>Now you have your SSH key pair stored in a PPK file, which you can use with PuTTY or other SSH clients that support PPK files.</p> <p>Remember to keep your private key secure, as it provides access to your AWS resources. Also, make sure your AWS CLI is properly configured with the necessary IAM permissions to perform these operations.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[Using aws-cli to generate ssh-key]]></summary></entry><entry><title type="html">pull a remote git branch to local repository</title><link href="https://gnataraj.github.io/blog/2023/git-pull-the-remote-branch-to-local/" rel="alternate" type="text/html" title="pull a remote git branch to local repository"/><published>2023-08-30T15:09:00+00:00</published><updated>2023-08-30T15:09:00+00:00</updated><id>https://gnataraj.github.io/blog/2023/git-pull-the-remote-branch-to-local</id><content type="html" xml:base="https://gnataraj.github.io/blog/2023/git-pull-the-remote-branch-to-local/"><![CDATA[<p>To pull the remote branch to your local repository using Git, follow these steps:</p> <ol> <li> <p>Make sure you have Git installed on your computer and that you have already cloned the repository.</p> </li> <li> <p>Open a terminal or command prompt on your local machine.</p> </li> <li>Change the current working directory to your local repository’s root directory. You can use the <code class="language-plaintext highlighter-rouge">cd</code> command to navigate to the repository directory. For example: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /path/to/your/local/repository
</code></pre></div> </div> </li> <li>Check the available remote branches and their status by running the following command: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch -r
</code></pre></div> </div> <p>This will show you a list of remote branches. Find the branch you want to pull from the remote repository.</p> </li> <li>If the branch you want to pull is not already checked out locally, you can create and check out a new local branch with the same name as the remote branch using: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout -b branch_name origin/branch_name
</code></pre></div> </div> <p>Replace <code class="language-plaintext highlighter-rouge">branch_name</code> with the name of the remote branch you want to pull.</p> </li> <li>If you already have the local branch with the same name and want to update it with the changes from the remote branch, simply checkout to the local branch: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout branch_name
</code></pre></div> </div> </li> <li>Finally, pull the changes from the remote branch to your local branch using the <code class="language-plaintext highlighter-rouge">git pull</code> command: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull origin branch_name
</code></pre></div> </div> <p>This command will fetch the changes from the remote branch and merge them into your local branch.</p> </li> </ol> <p>Now your local branch is up to date with the remote branch, and you can continue working with the latest changes.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="git"/><summary type="html"><![CDATA[pull a remote git branch to local repository]]></summary></entry><entry><title type="html">troubleshooting ssl/tls certificate valiadation issue in wget</title><link href="https://gnataraj.github.io/blog/2023/troubleshooting-wget-ssh/" rel="alternate" type="text/html" title="troubleshooting ssl/tls certificate valiadation issue in wget"/><published>2023-08-30T15:09:00+00:00</published><updated>2023-08-30T15:09:00+00:00</updated><id>https://gnataraj.github.io/blog/2023/troubleshooting-wget-ssh</id><content type="html" xml:base="https://gnataraj.github.io/blog/2023/troubleshooting-wget-ssh/"><![CDATA[<p>If you’re encountering the “SSL/TLS certificate is not being validated” issue with the <code class="language-plaintext highlighter-rouge">wget</code> command, it means that <code class="language-plaintext highlighter-rouge">wget</code> is not able to verify the SSL/TLS certificate of the server. This could happen for various reasons, and here are some steps you can take to address the issue:</p> <ol> <li> <p><strong>Update <code class="language-plaintext highlighter-rouge">wget</code>:</strong> Ensure that you are using the latest version of <code class="language-plaintext highlighter-rouge">wget</code> as newer versions may have bug fixes and improvements.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>wget
</code></pre></div> </div> <p>On other systems, you may need to use the package manager specific to your platform.</p> </li> <li> <p><strong>Check Certificate Expiry:</strong> Make sure that the SSL/TLS certificate on the server you are trying to connect to is still valid. Certificates have expiration dates, and if the certificate has expired, <code class="language-plaintext highlighter-rouge">wget</code> will not be able to validate it.</p> </li> <li> <p><strong>Specify Certificate Authority (CA) File:</strong></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--ca-certificate</span><span class="o">=</span>/path/to/ca-cert-file https://example.com
</code></pre></div> </div> <p>Replace <code class="language-plaintext highlighter-rouge">/path/to/ca-cert-file</code> with the path to your CA certificate file. This helps <code class="language-plaintext highlighter-rouge">wget</code> to validate the server’s certificate against the provided CA certificate.</p> </li> <li> <p><strong>Use <code class="language-plaintext highlighter-rouge">--no-check-certificate</code> (Not Recommended):</strong> While this is not recommended for security reasons, you can use the <code class="language-plaintext highlighter-rouge">--no-check-certificate</code> option to bypass SSL certificate validation.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">--no-check-certificate</span> https://example.com
</code></pre></div> </div> <p>This option should only be used in a controlled environment or when you are sure of the security implications.</p> </li> <li> <p><strong>Check System Date and Time:</strong> Ensure that the system date and time on your machine are accurate. If the date and time are incorrect, SSL/TLS certificate validation may fail.</p> </li> <li> <p><strong>Firewall and Proxy Settings:</strong> If you are behind a firewall or using a proxy, make sure that it is configured correctly and not causing interference with the SSL/TLS connection.</p> </li> </ol> <p>Remember that using <code class="language-plaintext highlighter-rouge">--no-check-certificate</code> compromises security, and it’s essential to identify and address the underlying issue causing the certificate validation failure whenever possible.</p>]]></content><author><name></name></author><category term="troubleshoot"/><category term="troubleshoot"/><summary type="html"><![CDATA[troubleshooting ssl/tls certificate valiadation issue in wget]]></summary></entry><entry><title type="html">Accessing Windows Shared Folders From Linux</title><link href="https://gnataraj.github.io/blog/2023/accessing-windows-shared-folders-from-linux/" rel="alternate" type="text/html" title="Accessing Windows Shared Folders From Linux"/><published>2023-08-30T15:09:00+00:00</published><updated>2023-08-30T15:09:00+00:00</updated><id>https://gnataraj.github.io/blog/2023/accessing-windows-shared-folders-from-linux</id><content type="html" xml:base="https://gnataraj.github.io/blog/2023/accessing-windows-shared-folders-from-linux/"><![CDATA[<p>Accessing Windows shared folders from Linux involves using the Samba (SMB) protocol, which allows interoperability between Linux/Unix servers and Windows-based clients. Here’s a step-by-step guide to access Windows shared folders from a Linux machine:</p> <h3 id="method-1-using-file-manager">Method 1: Using File Manager</h3> <p>Most modern Linux distributions come with file managers that support browsing SMB shares directly.</p> <ol> <li><strong>Open your File Manager:</strong> <ul> <li>For example, if you are using GNOME, open the Nautilus file manager.</li> <li>In KDE, use Dolphin.</li> </ul> </li> <li><strong>Connect to the Server:</strong> <ul> <li>In Nautilus, go to <code class="language-plaintext highlighter-rouge">Other Locations</code> and enter <code class="language-plaintext highlighter-rouge">smb://&lt;windows_ip_address&gt;/&lt;shared_folder_name&gt;</code>.</li> <li>In Dolphin, use the address bar and enter <code class="language-plaintext highlighter-rouge">smb://&lt;windows_ip_address&gt;/&lt;shared_folder_name&gt;</code>.</li> </ul> </li> <li><strong>Authentication:</strong> <ul> <li>If the shared folder requires authentication, you will be prompted to enter your username and password.</li> </ul> </li> </ol> <h3 id="method-2-using-the-command-line">Method 2: Using the Command Line</h3> <p>You can use the <code class="language-plaintext highlighter-rouge">smbclient</code> tool or mount the share using <code class="language-plaintext highlighter-rouge">cifs</code> filesystem.</p> <h4 id="using-smbclient-for-browsing-and-accessing-files">Using <code class="language-plaintext highlighter-rouge">smbclient</code> (for browsing and accessing files)</h4> <ol> <li><strong>Install smbclient:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>smbclient    <span class="c"># Debian/Ubuntu</span>
<span class="nb">sudo </span>yum <span class="nb">install </span>samba-client     <span class="c"># CentOS/RHEL</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>samba-client     <span class="c"># Fedora</span>
</code></pre></div> </div> </li> <li><strong>Access the Shared Folder:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>smbclient //windows_ip_address/shared_folder <span class="nt">-U</span> username
</code></pre></div> </div> <ul> <li>Replace <code class="language-plaintext highlighter-rouge">windows_ip_address</code> with the IP address of the Windows machine.</li> <li>Replace <code class="language-plaintext highlighter-rouge">shared_folder</code> with the name of the shared folder.</li> <li>Replace <code class="language-plaintext highlighter-rouge">username</code> with your Windows username.</li> </ul> </li> <li><strong>Browse the Share:</strong> <ul> <li>After entering your password, you will be in the smbclient interactive shell, where you can use commands like <code class="language-plaintext highlighter-rouge">ls</code>, <code class="language-plaintext highlighter-rouge">cd</code>, <code class="language-plaintext highlighter-rouge">get</code>, and <code class="language-plaintext highlighter-rouge">put</code> to interact with files.</li> </ul> </li> </ol> <h4 id="using-cifs-for-mounting-the-share">Using <code class="language-plaintext highlighter-rouge">cifs</code> (for mounting the share)</h4> <ol> <li><strong>Install cifs-utils:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>cifs-utils    <span class="c"># Debian/Ubuntu</span>
<span class="nb">sudo </span>yum <span class="nb">install </span>cifs-utils        <span class="c"># CentOS/RHEL</span>
<span class="nb">sudo </span>dnf <span class="nb">install </span>cifs-utils        <span class="c"># Fedora</span>
</code></pre></div> </div> </li> <li><strong>Create a Mount Point:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mkdir</span> /mnt/windows_share
</code></pre></div> </div> </li> <li><strong>Mount the Share:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mount <span class="nt">-t</span> cifs //windows_ip_address/shared_folder /mnt/windows_share <span class="nt">-o</span> <span class="nv">username</span><span class="o">=</span>windows_username,password<span class="o">=</span>windows_password,workgroup<span class="o">=</span>WORKGROUP
</code></pre></div> </div> <ul> <li>Replace <code class="language-plaintext highlighter-rouge">windows_ip_address</code> with the IP address of the Windows machine.</li> <li>Replace <code class="language-plaintext highlighter-rouge">shared_folder</code> with the name of the shared folder.</li> <li>Replace <code class="language-plaintext highlighter-rouge">windows_username</code> and <code class="language-plaintext highlighter-rouge">windows_password</code> with your Windows credentials.</li> <li>Replace <code class="language-plaintext highlighter-rouge">WORKGROUP</code> with your network workgroup name if different.</li> </ul> </li> <li><strong>Access the Mounted Share:</strong> <ul> <li>Now you can access the shared folder at <code class="language-plaintext highlighter-rouge">/mnt/windows_share</code>.</li> </ul> </li> <li><strong>Unmount the Share:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>umount /mnt/windows_share
</code></pre></div> </div> </li> </ol> <h3 id="method-3-permanent-mount-via-fstab">Method 3: Permanent Mount via fstab</h3> <ol> <li><strong>Edit fstab File:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/fstab
</code></pre></div> </div> </li> <li><strong>Add an Entry:</strong> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//windows_ip_address/shared_folder /mnt/windows_share cifs username=windows_username,password=windows_password,workgroup=WORKGROUP,iocharset=utf8,sec=ntlm 0 0
</code></pre></div> </div> </li> <li><strong>Mount All Filesystems:</strong> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>mount <span class="nt">-a</span>
</code></pre></div> </div> <ul> <li>This ensures the shared folder is mounted automatically at boot.</li> </ul> </li> </ol> <p>By following these steps, you should be able to access Windows shared folders from your Linux machine easily.</p>]]></content><author><name></name></author><category term="how-to"/><category term="how-to"/><summary type="html"><![CDATA[Accessing Windows shared folders from Linux]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://gnataraj.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://gnataraj.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://gnataraj.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>