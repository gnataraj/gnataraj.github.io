<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://gnataraj.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://gnataraj.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2023-10-29T08:53:09+00:00</updated><id>https://gnataraj.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Git Pull The Remote Branch To Local</title><link href="https://gnataraj.github.io/blog/2023/git-pull-the-remote-branch-to-local/" rel="alternate" type="text/html" title="Git Pull The Remote Branch To Local"/><published>2023-10-29T00:00:00+00:00</published><updated>2023-10-29T00:00:00+00:00</updated><id>https://gnataraj.github.io/blog/2023/git-pull-the-remote-branch-to-local</id><content type="html" xml:base="https://gnataraj.github.io/blog/2023/git-pull-the-remote-branch-to-local/"><![CDATA[<p>To pull the remote branch to your local repository using Git, follow these steps:</p> <ol> <li> <p>Make sure you have Git installed on your computer and that you have already cloned the repository.</p> </li> <li> <p>Open a terminal or command prompt on your local machine.</p> </li> <li>Change the current working directory to your local repository’s root directory. You can use the <code class="language-plaintext highlighter-rouge">cd</code> command to navigate to the repository directory. For example: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /path/to/your/local/repository
</code></pre></div> </div> </li> <li>Check the available remote branches and their status by running the following command: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch -r
</code></pre></div> </div> <p>This will show you a list of remote branches. Find the branch you want to pull from the remote repository.</p> </li> <li>If the branch you want to pull is not already checked out locally, you can create and check out a new local branch with the same name as the remote branch using: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout -b branch_name origin/branch_name
</code></pre></div> </div> <p>Replace <code class="language-plaintext highlighter-rouge">branch_name</code> with the name of the remote branch you want to pull.</p> </li> <li>If you already have the local branch with the same name and want to update it with the changes from the remote branch, simply checkout to the local branch: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout branch_name
</code></pre></div> </div> </li> <li>Finally, pull the changes from the remote branch to your local branch using the <code class="language-plaintext highlighter-rouge">git pull</code> command: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git pull origin branch_name
</code></pre></div> </div> <p>This command will fetch the changes from the remote branch and merge them into your local branch.</p> </li> </ol> <p>Now your local branch is up to date with the remote branch, and you can continue working with the latest changes.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[To pull the remote branch to your local repository using Git, follow these steps:]]></summary></entry><entry><title type="html">Nginx Web Server With Ssl</title><link href="https://gnataraj.github.io/blog/2023/nginx-web-server-with-SSL/" rel="alternate" type="text/html" title="Nginx Web Server With Ssl"/><published>2023-10-29T00:00:00+00:00</published><updated>2023-10-29T00:00:00+00:00</updated><id>https://gnataraj.github.io/blog/2023/nginx-web-server-with-SSL</id><content type="html" xml:base="https://gnataraj.github.io/blog/2023/nginx-web-server-with-SSL/"><![CDATA[<p>Running an Nginx Docker container with a self-signed SSL certificate involves a few steps. Here’s a step-by-step guide to help you set it up:</p> <ol> <li> <p><strong>Create a Self-Signed SSL Certificate:</strong></p> <p>You can use the OpenSSL tool to generate a self-signed SSL certificate.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>openssl req <span class="nt">-x509</span> <span class="nt">-nodes</span> <span class="nt">-days</span> 365 <span class="nt">-newkey</span> rsa:2048 <span class="nt">-keyout</span> nginx.key <span class="nt">-out</span> nginx.crt
</code></pre></div> </div> <p>This command will generate two files: <code class="language-plaintext highlighter-rouge">nginx.key</code> (private key) and <code class="language-plaintext highlighter-rouge">nginx.crt</code> (self-signed certificate).</p> </li> <li> <p><strong>Create a Dockerfile:</strong></p> <p>Create a file named <code class="language-plaintext highlighter-rouge">Dockerfile</code> in your project directory with the following content:</p> <div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> nginx:latest</span>

<span class="c"># Copy the SSL certificate and key to the container</span>
<span class="k">COPY</span><span class="s"> nginx.crt /etc/nginx/ssl/nginx.crt</span>
<span class="k">COPY</span><span class="s"> nginx.key /etc/nginx/ssl/nginx.key</span>

<span class="c"># Copy the Nginx configuration file</span>
<span class="k">COPY</span><span class="s"> nginx.conf /etc/nginx/conf.d/default.conf</span>
</code></pre></div> </div> </li> <li> <p><strong>Create Nginx Configuration:</strong></p> <p>Create an <code class="language-plaintext highlighter-rouge">nginx.conf</code> file in the same directory as your Dockerfile with the following content:</p> <div class="language-nginx highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">443</span> <span class="s">ssl</span><span class="p">;</span>
    <span class="kn">server_name</span> <span class="s">your_domain.com</span><span class="p">;</span>  <span class="c1"># Change this to your domain name</span>

    <span class="kn">ssl_certificate</span> <span class="n">/etc/nginx/ssl/nginx.crt</span><span class="p">;</span>
    <span class="kn">ssl_certificate_key</span> <span class="n">/etc/nginx/ssl/nginx.key</span><span class="p">;</span>

    <span class="kn">location</span> <span class="n">/</span> <span class="p">{</span>
        <span class="kn">root</span>   <span class="n">/usr/share/nginx/html</span><span class="p">;</span>
        <span class="kn">index</span>  <span class="s">index.html</span> <span class="s">index.htm</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div> </div> <p>Replace <code class="language-plaintext highlighter-rouge">your_domain.com</code> with your actual domain name.</p> </li> <li> <p><strong>Build the Docker Image:</strong></p> <p>Run the following command in your terminal to build the Docker image:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> nginx-ssl <span class="nb">.</span>
</code></pre></div> </div> </li> <li> <p><strong>Run the Docker Container:</strong></p> <p>Finally, run the Docker container using the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-d</span> <span class="nt">-p</span> 443:443 nginx-ssl
</code></pre></div> </div> </li> </ol> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run --name some-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx
</code></pre></div></div> <p>docker run –name nginx-ssl -v //home/ubuntu/data:/usr/share/nginx/html:ro -p 443:443 -d nginx-ssl</p> <p>This maps the container’s port 443 to the host’s port 443.</p> <ol> <li> <p><strong>Access the Site:</strong></p> <p>Open a web browser and navigate to <code class="language-plaintext highlighter-rouge">https://your_domain.com</code>. You might get a security warning due to the self-signed certificate, but you can proceed to the site. The browser will indicate that the connection is not fully secure because the certificate is self-signed.</p> </li> </ol> <p>Remember that using self-signed certificates is not recommended for production environments since they don’t provide the same level of security as trusted certificates issued by a certificate authority. In a production environment, you should obtain a valid SSL certificate from a trusted certificate authority like Let’s Encrypt.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Running an Nginx Docker container with a self-signed SSL certificate involves a few steps. Here’s a step-by-step guide to help you set it up:]]></summary></entry><entry><title type="html">a post with code</title><link href="https://gnataraj.github.io/blog/2023/aws-cli-ssh-keys/" rel="alternate" type="text/html" title="a post with code"/><published>2023-08-30T15:09:00+00:00</published><updated>2023-08-30T15:09:00+00:00</updated><id>https://gnataraj.github.io/blog/2023/aws-cli-ssh-keys</id><content type="html" xml:base="https://gnataraj.github.io/blog/2023/aws-cli-ssh-keys/"><![CDATA[<p>To create an SSH key pair using the AWS Command Line Interface (CLI) and store it in a PPK (PuTTY Private Key) file, you can follow these steps:</p> <ol> <li> <p><strong>Install AWS CLI</strong>: If you haven’t already, you’ll need to install the AWS CLI on your local machine. You can download it from the <a href="https://aws.amazon.com/cli/">official AWS CLI website</a>.</p> </li> <li> <p><strong>Configure AWS CLI</strong>: Before you can use the AWS CLI, you need to configure it with your AWS credentials. You can do this by running the <code class="language-plaintext highlighter-rouge">aws configure</code> command and providing your AWS Access Key ID, Secret Access Key, default region, and output format.</p> </li> <li> <p><strong>Generate SSH Key Pair</strong>: You can use the <code class="language-plaintext highlighter-rouge">aws ec2 create-key-pair</code> command to generate an SSH key pair. Here’s an example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws ec2 create-key-pair <span class="nt">--key-name</span> MyKeyPair <span class="nt">--query</span> <span class="s1">'KeyMaterial'</span> <span class="nt">--output</span> text <span class="o">&gt;</span> MyKeyPair.pem
</code></pre></div> </div> <ul> <li><code class="language-plaintext highlighter-rouge">--key-name MyKeyPair</code>: Replace “MyKeyPair” with a name for your key pair.</li> <li><code class="language-plaintext highlighter-rouge">--query 'KeyMaterial' --output text</code>: This part of the command extracts the private key material and saves it in a file.</li> </ul> </li> <li> <p><strong>Convert the PEM Key to PPK</strong>: AWS generates the private key in PEM format, but if you plan to use it with PuTTY, you’ll need to convert it to PPK format. You can use a tool like PuTTYgen to do this:</p> <ul> <li>Open PuTTYgen.</li> <li>Click “Conversions” in the top menu.</li> <li>Select “Import Key” and choose the <code class="language-plaintext highlighter-rouge">MyKeyPair.pem</code> file generated in step 3.</li> <li>Click “Save Private Key” to save it in PPK format.</li> </ul> </li> </ol> <p>Now you have your SSH key pair stored in a PPK file, which you can use with PuTTY or other SSH clients that support PPK files.</p> <p>Remember to keep your private key secure, as it provides access to your AWS resources. Also, make sure your AWS CLI is properly configured with the necessary IAM permissions to perform these operations.</p>]]></content><author><name></name></author><category term="sample-posts"/><category term="formatting"/><category term="code"/><summary type="html"><![CDATA[Using aws-cli to generate ssh-key]]></summary></entry><entry><title type="html">Displaying External Posts on Your al-folio Blog</title><link href="https://gnataraj.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/" rel="alternate" type="text/html" title="Displaying External Posts on Your al-folio Blog"/><published>2022-04-23T23:20:09+00:00</published><updated>2022-04-23T23:20:09+00:00</updated><id>https://gnataraj.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog</id><content type="html" xml:base="https://gnataraj.github.io/blog/2022/displaying-external-posts-on-your-al-folio-blog/"><![CDATA[]]></content><author><name></name></author></entry></feed>